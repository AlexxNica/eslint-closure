/** @const */
const Espree = {};

/**
 * Token types are re-used from Esprima.
 * @enum {string}
 *
 * @see https://github.com/eslint/espree/blob/master/lib/token-translator.js
 * @see https://github.com/jquery/esprima/blob/master/src/token.ts
 */
Espree.TokenType = {
  BOOLEAN: 'Boolean',
  EOF: '<end>',
  IDENTIFIER: 'Identifier',
  KEYWORD: 'Keyword',
  NULL: 'Null',
  NUMERIC: 'Numeric',
  PUNCTUATOR: 'Punctuator',
  STRING: 'String',
  REGULAR_EXPRESSION: 'RegularExpression',
  TEMPLATE: 'Template',
  JSX_IDENTIFIER: 'JSXIdentifier',
  JSX_TEXT: 'JSXText',
};

/**
 * @enum {string}
 * @see https://github.com/eslint/espree/blob/master/lib/visitor-keys.js
 */
Espree.Node = {
  AssignmentExpression: 'AssignmentExpression',
  AssignmentPattern: 'AssignmentPattern',
  ArrayExpression: 'ArrayExpression',
  ArrayPattern: 'ArrayPattern',
  ArrowFunctionExpression: 'ArrowFunctionExpression',
  BlockStatement: 'BlockStatement',
  BinaryExpression: 'BinaryExpression',
  BreakStatement: 'BreakStatement',
  CallExpression: 'CallExpression',
  CatchClause: 'CatchClause',
  ClassBody: 'ClassBody',
  ClassDeclaration: 'ClassDeclaration',
  ClassExpression: 'ClassExpression',
  ConditionalExpression: 'ConditionalExpression',
  ContinueStatement: 'ContinueStatement',
  DoWhileStatement: 'DoWhileStatement',
  DebuggerStatement: 'DebuggerStatement',
  EmptyStatement: 'EmptyStatement',
  ExperimentalRestProperty: 'ExperimentalRestProperty',
  ExperimentalSpreadProperty: 'ExperimentalSpreadProperty',
  ExpressionStatement: 'ExpressionStatement',
  ForStatement: 'ForStatement',
  ForInStatement: 'ForInStatement',
  ForOfStatement: 'ForOfStatement',
  FunctionDeclaration: 'FunctionDeclaration',
  FunctionExpression: 'FunctionExpression',
  Identifier: 'Identifier',
  IfStatement: 'IfStatement',
  Literal: 'Literal',
  LabeledStatement: 'LabeledStatement',
  LogicalExpression: 'LogicalExpression',
  MemberExpression: 'MemberExpression',
  MetaProperty: 'MetaProperty',
  MethodDefinition: 'MethodDefinition',
  NewExpression: 'NewExpression',
  ObjectExpression: 'ObjectExpression',
  ObjectPattern: 'ObjectPattern',
  Program: 'Program',
  Property: 'Property',
  RestElement: 'RestElement',
  ReturnStatement: 'ReturnStatement',
  SequenceExpression: 'SequenceExpression',
  SpreadElement: 'SpreadElement',
  Super: 'Super',
  SwitchCase: 'SwitchCase',
  SwitchStatement: 'SwitchStatement',
  TaggedTemplateExpression: 'TaggedTemplateExpression',
  TemplateElement: 'TemplateElement',
  TemplateLiteral: 'TemplateLiteral',
  ThisExpression: 'ThisExpression',
  ThrowStatement: 'ThrowStatement',
  TryStatement: 'TryStatement',
  UnaryExpression: 'UnaryExpression',
  UpdateExpression: 'UpdateExpression',
  VariableDeclaration: 'VariableDeclaration',
  VariableDeclarator: 'VariableDeclarator',
  WhileStatement: 'WhileStatement',
  WithStatement: 'WithStatement',
  YieldExpression: 'YieldExpression',
  JSXIdentifier: 'JSXIdentifier',
  JSXNamespacedName: 'JSXNamespacedName',
  JSXMemberExpression: 'JSXMemberExpression',
  JSXEmptyExpression: 'JSXEmptyExpression',
  JSXExpressionContainer: 'JSXExpressionContainer',
  JSXElement: 'JSXElement',
  JSXClosingElement: 'JSXClosingElement',
  JSXOpeningElement: 'JSXOpeningElement',
  JSXAttribute: 'JSXAttribute',
  JSXSpreadAttribute: 'JSXSpreadAttribute',
  JSXText: 'JSXText',
  ExportDefaultDeclaration: 'ExportDefaultDeclaration',
  ExportNamedDeclaration: 'ExportNamedDeclaration',
  ExportAllDeclaration: 'ExportAllDeclaration',
  ExportSpecifier: 'ExportSpecifier',
  ImportDeclaration: 'ImportDeclaration',
  ImportSpecifier: 'ImportSpecifier',
  ImportDefaultSpecifier: 'ImportDefaultSpecifier',
  ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
};
